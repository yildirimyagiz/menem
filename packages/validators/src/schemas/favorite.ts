import { z } from "zod";
import type { Property, User } from "../../../db/prisma/src/interfaces";

// Custom Zod type for User and Property
const userCustom = z.custom<User>((data): data is User => {
  return typeof data === "object" && data !== null && "id" in data;
}, "Invalid User type");

const propertyCustom = z.custom<Property>((data): data is Property => {
  return typeof data === "object" && data !== null && "id" in data;
}, "Invalid Property type");

/**
 * Favorite Schema
 * Represents a user's favorite property, with audit and soft delete support.
 */
export const FavoriteSchema = z.object({
  id: z.string().uuid(), // Using uuid since it's generated by cuid()
  userId: z.string().uuid(),
  propertyId: z.string().uuid(),

  // Timestamps
  createdAt: z.date(),
  updatedAt: z.date(),
  deletedAt: z.date().nullable().optional(),

  // Audit fields
  createdBy: z.string().uuid().optional(),
  updatedBy: z.string().uuid().optional(),

  // Relations
  user: userCustom.optional(),
  property: propertyCustom.optional(),
});

/**
 * Create Favorite Input
 * Used for creating a new favorite.
 */
export const CreateFavoriteSchema = z.object({
  propertyId: z.string().uuid(),
  userId: z.string().uuid(),
});

/**
 * Update Favorite Input
 * Used for updating a favorite (e.g., soft delete).
 */
export const UpdateFavoriteSchema = z.object({
  id: z.string().uuid(),
  deletedAt: z.date().optional(),
  updatedBy: z.string().uuid().optional(),
});

/**
 * Toggle Favorite Input
 * Used for toggling a favorite (add/remove).
 */
export const ToggleFavoriteSchema = z.object({
  userId: z.string().uuid(),
  propertyId: z.string().cuid(), // Accept CUID for propertyId to match Prisma
});

/**
 * Favorite Filter Input
 * Used for filtering favorites in queries.
 */
export const FavoriteFilterSchema = z.object({
  userId: z.string().uuid().optional(),
  propertyId: z.string().uuid().optional(),
  createdAtFrom: z.date().optional(),
  createdAtTo: z.date().optional(),
  updatedAtFrom: z.date().optional(),
  updatedAtTo: z.date().optional(),
  deletedAtFrom: z.date().optional(),
  deletedAtTo: z.date().optional(),
  sortBy: z.enum(["createdAt", "updatedAt", "deletedAt"]).optional(),
  sortOrder: z.enum(["asc", "desc"]).optional(),
  page: z.number().min(1).optional(),
  pageSize: z.number().min(1).max(100).optional(),
});

// Zod Type Inference for TypeScript
export type Favorite = z.infer<typeof FavoriteSchema>;
export type CreateFavoriteInput = z.infer<typeof CreateFavoriteSchema>;
export type UpdateFavoriteInput = z.infer<typeof UpdateFavoriteSchema>;
export type ToggleFavoriteInput = z.infer<typeof ToggleFavoriteSchema>;
export type FavoriteFilterInput = z.infer<typeof FavoriteFilterSchema>;
